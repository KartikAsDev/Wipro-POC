{"ast":null,"code":"var _jsxFileName = \"/Users/Kartik/Desktop/my-app/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport { getSuggestions } from './mock-server';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      suggestions: [],\n      inputValue: ''\n    };\n  }\n  /**\n   Handle click with be called when user clicks or changes the value of the search box\n   Will make call to getSuggestions to pick suggestions and set the state for the same\n   Will find the matching option from suggestions array\n   will update the bg color of the matched item\n   */\n\n\n  handleClick(e) {\n    document.getElementById('suggestionModal').hidden = false;\n    let value = e.target.value;\n    getSuggestions(value).then(suggestions => {\n      this.setState({\n        suggestions: suggestions,\n        inputValue: value\n      });\n      const matchingItem = suggestions.find(item => {\n        return item.indexOf(value) !== -1;\n      });\n      const listItems = document.getElementsByTagName('li');\n\n      for (let i = 0; i < listItems.length; i++) {\n        if (listItems[i].outerText === matchingItem) {\n          listItems[i].setAttribute('style', 'background-color: #E0E0E0');\n        }\n      }\n    });\n  }\n  /**\n   select item will be called on selecting an item from the suggestions\n   will update the input value by setting the state input value by selected item\n   will make the suggestion list empty\n   will put the focus back to input box\n   */\n\n\n  selectItem(e, data) {\n    e.stopPropagation();\n    e.preventDefault();\n    this.setState({\n      inputValue: data + \" \",\n      suggestions: []\n    });\n    document.getElementById('searchBox').focus();\n    document.getElementById('suggestionModal').hidden = true;\n  }\n\n  onExitingInputBox(e) {// document.getElementById('suggestionBox').hidden = true;\n  }\n\n  render() {\n    /**\n     * making suggestion list here\n     */\n    const showSuggestions = /*#__PURE__*/React.createElement(\"ul\", {\n      id: \"suggestionBox\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 30\n      }\n    }, this.state.suggestions.map(item => /*#__PURE__*/React.createElement(\"li\", {\n      className: \"suggestionItem\",\n      key: item,\n      onClick: e => this.selectItem(e, item),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }\n    }, item)));\n    return (\n      /*#__PURE__*/\n\n      /**\n       * Onclick is used because we need to trigger handleClick when user put the focus on the input box to get and render the suggestions\n       */\n      React.createElement(\"div\", {\n        className: \"app\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 10\n        }\n      }, \" Search : \", /*#__PURE__*/React.createElement(\"input\", {\n        name: \"search\",\n        type: \"text\",\n        value: this.state.inputValue,\n        id: \"searchBox\",\n        onChange: e => this.handleClick(e),\n        onClick: e => this.handleClick(e),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 26\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        id: \"suggestionModal\",\n        hidden: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }\n      }, showSuggestions)))\n    );\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/Kartik/Desktop/my-app/src/App.js"],"names":["React","Component","getSuggestions","App","constructor","state","suggestions","inputValue","handleClick","e","document","getElementById","hidden","value","target","then","setState","matchingItem","find","item","indexOf","listItems","getElementsByTagName","i","length","outerText","setAttribute","selectItem","data","stopPropagation","preventDefault","focus","onExitingInputBox","render","showSuggestions","map"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { getSuggestions } from './mock-server'\n\nclass App extends Component{\n  constructor() {\n    super();\n    this.state = {\n      suggestions: [],\n      inputValue: '',\n    }\n  }\n\n  /**\n   Handle click with be called when user clicks or changes the value of the search box\n   Will make call to getSuggestions to pick suggestions and set the state for the same\n   Will find the matching option from suggestions array\n   will update the bg color of the matched item\n   */\n  handleClick(e) {\n    document.getElementById('suggestionModal').hidden = false;\n    let value = e.target.value;\n    getSuggestions(value).then(suggestions => {\n      this.setState({\n        suggestions: suggestions,\n        inputValue: value,\n      }) ;\n\n      const matchingItem = suggestions.find(item => {\n        return item.indexOf(value) !== -1;\n      });\n\n      const listItems = document.getElementsByTagName('li');\n      for(let i =0; i < listItems.length; i++) {\n        if(listItems[i].outerText === matchingItem) {\n          listItems[i].setAttribute('style', 'background-color: #E0E0E0');\n        }\n      }\n    });\n  }\n\n  /**\n   select item will be called on selecting an item from the suggestions\n   will update the input value by setting the state input value by selected item\n   will make the suggestion list empty\n   will put the focus back to input box\n   */\n  selectItem(e, data) {\n    e.stopPropagation();\n    e.preventDefault();\n    this.setState({\n      inputValue: data + \" \",\n      suggestions: [],\n    });\n    document.getElementById('searchBox').focus();\n    document.getElementById('suggestionModal').hidden = true;\n  }\n\n  onExitingInputBox(e) {\n    // document.getElementById('suggestionBox').hidden = true;\n  }\n\n  render() {\n    /**\n     * making suggestion list here\n     */\n    const showSuggestions =  <ul id=\"suggestionBox\">\n          {this.state.suggestions.map(item =>\n          <li className=\"suggestionItem\"\n                key={item} \n                onClick={(e) => this.selectItem(e, item)}>\n                {item}\n              </li>)}\n          </ul>\n\n    return (\n      /**\n       * Onclick is used because we need to trigger handleClick when user put the focus on the input box to get and render the suggestions\n       */\n      <div className=\"app\">\n        <div >\n         <span> Search : <input name=\"search\" \n                type=\"text\"\n                value={this.state.inputValue}\n                id=\"searchBox\"\n                onChange={(e) => this.handleClick(e)} \n                onClick={(e) => this.handleClick(e)}>\n          </input></span>\n          <div id=\"suggestionModal\" hidden>\n            {showSuggestions}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}